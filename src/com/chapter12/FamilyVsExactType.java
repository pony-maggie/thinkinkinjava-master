package com.chapter12;

//the difference between instanceof and class

class Base
{
	
}

class Derived extends Base {}

public class FamilyVsExactType 
{

	static void test(Object x)
	{
		System.out.println("Testing x of type " + x.getClass());
		System.out.println("x instance of base " + (x instanceof Base));
		System.out.println("x instance of Derived " + (x instanceof Derived));
		System.out.println("Base.isinstace (x) " + Base.class.isInstance(x));
		System.out.println("Derived.isinstace (x) " + Derived.class.isInstance(x));
		System.out.println("x.getClass() == Base.class " + (x.getClass() == Base.class));
		System.out.println("x.getClass() == Derived.class " + (x.getClass() == Derived.class));
		System.out.println("x.getClass.equals(Base.class) " + (x.getClass().equals(Base.class)));
		System.out.println("x.getClass.equals(Derived.class) " + (x.getClass().equals(Derived.class)));
		
	}
	/**
	 * @param args
	 * 输出结果:
	 * Testing x of typeclass com.chapter12.Base //这个可以理解，就是当前类的类型
		x instance of base true //Base类的实例
		x instance of Derived false //当然不是Derived类的实例
		Base.isinstace (x) true //isInstance 与 instance of是一样的效果,只不过调用方不一样
		Derived.isinstace (x) false
		x.getClass() == Base.class true
		x.getClass() == Derived.class false
		x.getClass.equals(Base.class) true
		x.getClass.equals(Derived.class) false
		
		
		
		Testing x of typeclass com.chapter12.Derived
		x instance of base true
		x instance of Derived true //注意这里
		Base.isinstace (x) true
		Derived.isinstace (x) true //注意这里
		x.getClass() == Base.class false
		x.getClass() == Derived.class true
		x.getClass.equals(Base.class) false
		x.getClass.equals(Derived.class) true
		
		这里看出, getClass获取的是精确类类型，即使是基类或派生类也匹配不上，而instance of是表明你是否这个类或者它的基类的实例。
	 */
	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		test(new Base());
		test(new Derived());

	}

}
